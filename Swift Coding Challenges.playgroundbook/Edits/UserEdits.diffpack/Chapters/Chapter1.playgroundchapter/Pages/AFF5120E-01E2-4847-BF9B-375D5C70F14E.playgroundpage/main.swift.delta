<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>/*“Write a function that prints all possible permutations of a given input string.
 
 Tip: A string permutation is any given rearrangement of its letters, for example “boamtw” is a permutation of “wombat”.
 
 Sample input and output
 The string “a” should print “a”.
 The string “ab” should “ab”, “ba”.
 The string “abc” should print “abc”, “acb”, “bac”, “bca”, “cab”, “cba”.
 The string “wombat” should print 720 permutations.”
 
 Excerpt From: Paul Hudson. “Swift Coding Challenges”. Apple Books. */


func permuteWirth&lt;T&gt;(_ a: [T], _ n: Int) {
    if n == 0 {
        print(a)
    } else {
        var a = a
        permuteWirth(a, n - 1)
        for i in 0..&lt;n {
            a.swapAt(i, n)
            permuteWirth(a, n - 1)
            a.swapAt(i, n)
        }
    }
}

permuteWirth(["a", "b", "c"], 2)
</string>
			<key>ModifiedRange</key>
			<string>{0, 808}</string>
			<key>OriginalContent</key>
			<string>
</string>
			<key>OriginalRange</key>
			<string>{0, 1}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
