<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>/*“Write a function that accepts two strings, and returns true if they are identical in length but have no more than three different letters, taking case and string order into account.
 
 Sample input and output
 The strings “Clamp” and “Cramp” would return true, because there is one letter difference.
 The strings “Clamp” and “Crams” would return true, because there are two letter differences.
 The strings “Clamp” and “Grams” would return true, because there are three letter differences.
 The strings “Clamp” and “Grans” would return false, because there are four letter differences.
 The strings “Clamp” and “Clam” would return false, because they are different lengths.
 The strings “clamp” and “maple” should return false. Although they differ by only one letter, the letters that match are in different positions.”
 
 Excerpt From: Paul Hudson. “Swift Coding Challenges”. Apple Books. */

func isSimilar(s1: String, s2: String) -&gt; Bool {
    if s1.count != s2.count {
        return false
    }
    
    let chars1 = Array(s1)
    let chars2 = Array(s2)
    
    var differences = 0
    
    for (index, letter) in chars1.enumerated() {
        if letter != chars2[index] {
            differences += 1
            if differences &gt; 3 {
                return false
            }
        }
    }
    
    return true
}

assert(isSimilar(s1: "Clamp", s2: "Cramp") == true)
assert(isSimilar(s1: "Clamp", s2: "Crams") == true)
assert(isSimilar(s1: "Clamp", s2: "Grams") == true)
assert(isSimilar(s1: "Clamp", s2: "Grans") == false) // 4 differences
assert(isSimilar(s1: "Clamp", s2: "Clam") == false) // different lengths
assert(isSimilar(s1: "Clamp", s2: "Maple") == false) //Although they differ by only one letter, the letters that match are in different positions.”
</string>
			<key>ModifiedRange</key>
			<string>{1, 1776}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{1, 0}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
