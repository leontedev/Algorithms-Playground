<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>BaseFile</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/Template.playgroundpage/main.swift</string>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>/*“Write a function that accepts a string of words with a similar prefix, separated by spaces, and returns the longest substring that prefixes all words.
 
 Sample input and output
 The string “swift switch swill swim” should return “swi”.
 The string “flip flap flop” should return “fl”.”
 
 Excerpt From: Paul Hudson. “Swift Coding Challenges”. Apple Books. */

import Foundation

func longestPrefix(from input: String) -&gt; String {
    var words = input.split(separator: " ").map { Array(String($0)) }
    
    guard let firstWord = words.first else { return "" }
    words.removeFirst()
    
    var prefix = ""
    
    for (index, letter) in firstWord.enumerated() {
        for word in words {
            if letter != word[index] {
                return prefix
            }
        }
        prefix.append(letter)
    }
    
    return prefix
}

longestPrefix(from: "swift switch swill swim") == "swi"
longestPrefix(from: "flip flap flop") == "fl"


func longestPrefix_v2(input: String) -&gt; String {
    let parts = input.components(separatedBy: " ")
    guard let first = parts.first else { return "" }
    
    var currentPrefix = ""
    var bestPrefix = ""
    
    for letter in first {
        currentPrefix.append(letter)
        
        for word in parts {
            if !word.hasPrefix(currentPrefix) {
                return bestPrefix
            }
        }
        
        bestPrefix = currentPrefix
    }
    
    return bestPrefix
}

assert(longestPrefix_v2(input: "swift switch swill swim") == "swi")
assert(longestPrefix_v2(input: "flip flap flop") == "fl")
</string>
			<key>ModifiedRange</key>
			<string>{1, 1585}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{1, 0}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
